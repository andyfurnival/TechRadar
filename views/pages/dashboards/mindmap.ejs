<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">

    <%- include("../../partials/head.ejs") %>

    <style>

        .link {
            fill: none;
            stroke: #666;
            stroke-width: 1.5px;
        }

        #licensing {
            fill: blue;
        }

        .link.techlink {
            stroke: green;
            stroke-dasharray: 0, 2 1;
        }

        .tech.TBD {
            fill: #fff;
        }

        .tech.Adopt {
            fill: #0F0;
        }

        .tech.Trial {
            fill: #FA0;
        }

        .tech.Avoid {
            fill: #F00;
        }

        .project {
            fill: #00F;
        }

        circle {
            fill: #666;
            stroke: #333;
            stroke-width: 1.5px;
        }

        text {
            font: 10px sans-serif;
            pointer-events: none;
            text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
        }

    </style>
</head>

<body>

<%- include("../../partials/menu.ejs") %>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>

    var links = [
        <%
        for (var i = 0, len = data.length; i < len; i++) {
            var linkData = data[i];
        %>
        {
            source: "Name",
            target: "<%= linkData.name %>",
            type: "techlink",
            sourceType: "project",
            targetType: "tech",
            targetStatus: "<%= linkData.status %>"
        },
        <%
        }
        %>
    ];

    var nodes = {};

    // Compute the distinct nodes from the links.
    links.forEach(function (link) {
        link.source =
                nodes[link.source] ||
                (nodes[link.source] = {name: link.source, type: link.sourceType});
        link.target =
                nodes[link.target] ||
                (nodes[link.target] = {name: link.target, type: link.targetType, status: link.targetStatus});
    });

    var width = 960, height = 600;

    var force = d3.layout.force()
            .nodes(d3.values(nodes))
            .links(links)
            .size([width, height])
            .linkDistance(100)
            .charge(-300)
            .on("tick", tick)
            .start();

    var svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

    // Per-type markers, as they don't inherit styles.
    svg.append("defs").selectAll("marker")
            .data(["techlink"])
            .enter().append("marker")
            .attr("id", function (d) {
                return d;
            })
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", -1.5)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
            .append("path")
            .attr("d", "M0,-5L10,0L0,5");

    var path = svg.append("g").selectAll("path")
            .data(force.links())
            .enter().append("path")
            .attr("class", function (d) {
                return "link " + d.type;
            })
            .attr("marker-end", function (d) {
                return "url(#" + d.type + ")";
            });

    var circle = svg.append("g").selectAll("circle")
            .data(force.nodes())
            .enter().append("circle")
            .attr("r", 6)
            .attr("class", function (d) {
                if (d.type == "project") {
                    return "project";
                } else {
                    return "tech " + d.status;
                }
            })
            .call(force.drag)
            .on('dblclick', resetOnNode);

    var text = svg.append("g").selectAll("text")
            .data(force.nodes())
            .enter().append("text")
            .attr("x", 8)
            .attr("y", ".31em")
            .text(function (d) {
                return d.name;
            });

    // Use elliptical arc path segments to doubly-encode directionality.
    function tick() {
        path.attr("d", linkArc);
        circle.attr("transform", transform);
        text.attr("transform", transform);
    }

    function linkArc(d) {
        var dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y,
                dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
    }

    function transform(d) {
        return "translate(" + d.x + "," + d.y + ")";
    }

    function resetOnNode(node) {
        console.log(node);

        d3.values(nodes).forEach(function (aNode) {
            if (aNode == node) {
                aNode.keepNode = true;
            } else {
                aNode.keepNode = false;
            }
        });

        links = [];

        force.nodes(d3.values(nodes).filter(function (d) { return d.keepNode }))
                .links(links)
                .start();

        d3.keys(nodes).forEach(
                function (nodeKey) {
                    if (!nodes[nodeKey].keepNode) {
                        delete(nodes[nodeKey]);
                    }
                }
        );


        console.log(d3.values(nodes));


    }

</script>

<%- include("../../partials/footer.ejs") %>
</body>
</html>
